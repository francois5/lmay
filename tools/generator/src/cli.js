#!/usr/bin/env node

const { Command } = require('commander');
const path = require('path');
const fs = require('fs');
const FileSystemScanner = require('./scanner');
const LMAYGenerator = require('./generator');

const program = new Command();

program
  .name('lmay-generate')
  .description('G√©n√®re automatiquement des fichiers LMAY √† partir de l\'analyse de syst√®mes de fichiers')
  .version('1.0.0');

program
  .option('-i, --input <path>', 'Chemin du projet √† analyser', process.cwd())
  .option('-o, --output <path>', 'R√©pertoire de sortie pour les fichiers LMAY', null)
  .option('-c, --config <path>', 'Fichier de configuration personnalis√©')
  .option('--dry-run', 'Affiche ce qui serait g√©n√©r√© sans cr√©er les fichiers')
  .option('--verbose', 'Mode verbeux')
  .action(async (options) => {
    try {
      await generateLMAY(options);
    } catch (error) {
      console.error('Erreur:', error.message);
      if (options.verbose) {
        console.error(error.stack);
      }
      process.exit(1);
    }
  });

async function generateLMAY(options) {
  const startTime = Date.now();
  
  // R√©soudre les chemins
  const inputPath = path.resolve(options.input);
  const outputPath = options.output ? path.resolve(options.output) : inputPath;
  
  if (options.verbose) {
    console.log(`üîç Analyse du projet: ${inputPath}`);
    console.log(`üìÇ Sortie: ${outputPath}`);
  }

  // V√©rifier que le r√©pertoire d'entr√©e existe
  if (!fs.existsSync(inputPath)) {
    throw new Error(`Le r√©pertoire d'entr√©e n'existe pas: ${inputPath}`);
  }

  // Charger la configuration
  const config = await loadConfig(options.config);
  if (options.verbose) {
    console.log('‚öôÔ∏è  Configuration charg√©e');
  }

  // Scanner le syst√®me de fichiers
  console.log('üîé Analyse de la structure des fichiers...');
  const scanner = new FileSystemScanner(config);
  const structure = await scanner.scanDirectory(inputPath);
  
  if (!structure) {
    throw new Error('Impossible d\'analyser la structure du projet');
  }

  // Analyser la structure
  const analysis = scanner.analyzeStructure(structure);
  
  if (options.verbose) {
    console.log(`üìä Analyse termin√©e:`);
    console.log(`   - ${analysis.totalDirectories} r√©pertoires`);
    console.log(`   - ${analysis.totalFiles} fichiers`);
    console.log(`   - Langages d√©tect√©s: ${analysis.languages.join(', ') || 'aucun'}`);
    console.log(`   - Points d'entr√©e: ${analysis.entryPoints.length}`);
  }

  // Mode dry-run
  if (options.dryRun) {
    console.log('\nüß™ Mode dry-run - Aper√ßu de ce qui serait g√©n√©r√©:');
    console.log(`üìÑ ${path.join(outputPath, config.output.rootFile)}`);
    
    if (config.structure.createModuleFiles && analysis.totalDirectories > 3) {
      console.log('üìÑ Fichiers de modules additionnels seraient cr√©√©s');
    }
    
    console.log('\n‚úÖ G√©n√©ration simul√©e termin√©e');
    return;
  }

  // G√©n√©rer les fichiers LMAY
  console.log('‚ö° G√©n√©ration des fichiers LMAY...');
  const generator = new LMAYGenerator(config);
  const result = await generator.generate(outputPath, structure, analysis);

  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);

  console.log('\n‚úÖ G√©n√©ration termin√©e avec succ√®s!');
  console.log(`üìÑ Fichier principal: ${result.rootFile}`);
  if (result.moduleFiles && result.moduleFiles.length > 0) {
    console.log(`üìÑ Fichiers de modules: ${result.moduleFiles.length}`);
  }
  console.log(`‚è±Ô∏è  Dur√©e: ${duration}s`);

  // Conseils d'utilisation
  console.log('\nüí° Prochaines √©tapes:');
  console.log('   1. Examinez le fichier root.lmay g√©n√©r√©');
  console.log('   2. Ajustez les descriptions si n√©cessaire');
  console.log('   3. Validez avec: lmay-validate root.lmay');
}

async function loadConfig(configPath) {
  let config;
  
  if (configPath) {
    // Configuration personnalis√©e
    const fullPath = path.resolve(configPath);
    if (!fs.existsSync(fullPath)) {
      throw new Error(`Fichier de configuration introuvable: ${fullPath}`);
    }
    
    const configContent = fs.readFileSync(fullPath, 'utf8');
    config = JSON.parse(configContent);
  } else {
    // Configuration par d√©faut
    const defaultConfigPath = path.join(__dirname, '../config/default.json');
    const configContent = fs.readFileSync(defaultConfigPath, 'utf8');
    config = JSON.parse(configContent);
  }

  // Validation basique de la configuration
  if (!config.lmay || !config.analysis || !config.output) {
    throw new Error('Configuration LMAY invalide - sections manquantes');
  }

  return config;
}

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur inattendue:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
});

program.parse();